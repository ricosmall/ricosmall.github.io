{"data":{"site":{"siteMetadata":{"title":"进击的前端","author":"ricosmall"}},"markdownRemark":{"id":"9639b372-eb70-5d7d-af61-6c774766173f","excerpt":"1. 命名规范 驼峰式命名法： 驼峰式命名法由大（小）写字母开始，后续每个单词首字母都大写。\n按照第一个字母是否大写，分为： Pascal Case 大驼峰式命名法：首字母大写。如：StudentInfo Camel Case…","html":"<h2>1. 命名规范</h2>\n<h3>驼峰式命名法：</h3>\n<p>驼峰式命名法由大（小）写字母开始，后续每个单词首字母都大写。\n按照第一个字母是否大写，分为：</p>\n<ul>\n<li>Pascal Case 大驼峰式命名法：首字母大写。如：StudentInfo</li>\n<li>Camel Case 小驼峰式命名法：首字母小写。如：studentInfo</li>\n</ul>\n<!-- more -->\n<h3>1.1 变量</h3>\n<p>命名方法： 小驼峰式命名法\n命名规范： 前缀应当是名词。（函数的名字前缀为动词，以此区分变量和函数）\n命名建议：尽量在变量名字中体现所属类型，如：length、count等表示数字类型；而包含name、title表示为字符串类型。</p>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// good</span>\n<span class=\"token keyword\">var</span> maxCount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> tableTitle <span class=\"token operator\">=</span> <span class=\"token string\">'LoginTable'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">var</span> setCount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> getTitle <span class=\"token operator\">=</span> <span class=\"token string\">'LoginTable'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>1.2 函数</h3>\n<p>命名方法：小驼峰式命名法\n命名规范：前缀应当为动词\n命名建议：可以使用常见动词约定</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">动词</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">can</td>\n<td align=\"left\">判断是否可执行某个动作（权限）</td>\n<td align=\"left\">Boolean</td>\n</tr>\n<tr>\n<td align=\"left\">has</td>\n<td align=\"left\">判断是否含有某个值</td>\n<td align=\"left\">Boolean</td>\n</tr>\n<tr>\n<td align=\"left\">is</td>\n<td align=\"left\">判断是否为某个值</td>\n<td align=\"left\">Boolean</td>\n</tr>\n<tr>\n<td align=\"left\">get</td>\n<td align=\"left\">获取某个值</td>\n<td align=\"left\">NOT Boolean</td>\n</tr>\n<tr>\n<td align=\"left\">set</td>\n<td align=\"left\">设置某个值</td>\n<td align=\"left\">无返回值、Boolean或者返回链式对象</td>\n</tr>\n<tr>\n<td align=\"left\">load</td>\n<td align=\"left\">加载某些数据</td>\n<td align=\"left\">无返回值或加载状态</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 判断是否可读</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">canRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 获取名字</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>1.3 常量</h3>\n<p>命名方法：名称全部大写\n命名规范：使用大写字母和下划线组合命名，下划线用以分割单词\n命名建议：参照1.1</p>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token constant\">MAX_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.lrts.me'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>1.4 构造函数</h3>\n<p>命名方法：大驼峰式命名法\n命名规范：前缀为名称\n命名建议：无</p>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>1.5 类的成员</h3>\n<p>命名建议：</p>\n<ul>\n<li>公共属性和方法：跟变量和函数的命名一样</li>\n<li>私有属性和方法：前缀为_（下划线），后面跟公共属性和方法一样的命名方式</li>\n</ul>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 私有属性</span>\n    <span class=\"token keyword\">var</span> _name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 公共方法</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstudent1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => John</span></code></pre></div>\n<h2>2. 注释规范</h2>\n<p>JavaScript支持两种不同类型的注释：单行注释和多行注释。</p>\n<h3>2.1 单行注释</h3>\n<p>说明：单行注释以两个斜杠开始，以行尾结束\n语法：<code class=\"language-text\">//</code> 这是单行注释\n使用方式：</p>\n<ul>\n<li>单独一行：<code class=\"language-text\">// comments</code> 双斜杠与文字之间保留一个空格</li>\n<li>在代码后面添加注释：<code class=\"language-text\">var MAX_COUNT = 10; // comments</code> 双斜杠与代码结尾之间保留一个空格，与注释文字之间保留一个空格。</li>\n<li>注释代码：<code class=\"language-text\">// var MAX_COUNT = 10;</code> 双斜杠与代码之间保留一个空格。</li>\n</ul>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 单独一行</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token constant\">MAX_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在代码后面添加注释</span>\n\n<span class=\"token comment\">// 注释代码</span>\n<span class=\"token comment\">// setName();</span></code></pre></div>\n<h3>2.2 多行注释</h3>\n<p>说明：以<code class=\"language-text\">/*</code>开头，以<code class=\"language-text\">*/</code>结尾\n语法：<code class=\"language-text\">/* comments */</code>\n使用方法：</p>\n<ul>\n<li>若<code class=\"language-text\">/*</code>和<code class=\"language-text\">*/</code>在同一行，推荐采用单行注释</li>\n<li>若至少三行注释，第一行为<code class=\"language-text\">/*</code>，最后一行为<code class=\"language-text\">*/</code>，其他行以<code class=\"language-text\">*</code>开始，与注释文字之间保留一个空格，并且所有的<code class=\"language-text\">*</code>保持竖向对齐</li>\n</ul>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n * comments line one\n * comments line two\n */</span>\n<span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>2.3 函数（方法）注释</h3>\n<p>说明：函数（方法）注释也是多行注释的一种，但是包含了特殊的注释要求。\n语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 函数说明\n * @关键字\n */</span></code></pre></div>\n<p>常用注释关键字：（只列出一部分）</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">注释名</th>\n<th align=\"left\">语法</th>\n<th align=\"left\">含义</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">@param</td>\n<td align=\"left\">@param 参数名 {参数类型} 描述信息</td>\n<td align=\"left\">描述参数的信息</td>\n<td align=\"left\">@param name {String} 名称</td>\n</tr>\n<tr>\n<td align=\"left\">@return</td>\n<td align=\"left\">@return {返回类型} 描述信息</td>\n<td align=\"left\">描述返回值的信息</td>\n<td align=\"left\">@return {String} 名称</td>\n</tr>\n<tr>\n<td align=\"left\">@author</td>\n<td align=\"left\">@author 作者名字 附属信息</td>\n<td align=\"left\">描述此函数或者模块的作者信息</td>\n<td align=\"left\">@author Tom 2016-10-10</td>\n</tr>\n<tr>\n<td align=\"left\">@version</td>\n<td align=\"left\">@version xx.xx.xx</td>\n<td align=\"left\">描述此函数或者模块的版本号</td>\n<td align=\"left\">@version 1.0.1</td>\n</tr>\n<tr>\n<td align=\"left\">@example</td>\n<td align=\"left\">@example 示例代码</td>\n<td align=\"left\">示例函数使用方法</td>\n<td align=\"left\">@example setName(‘John’)</td>\n</tr>\n</tbody>\n</table>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 合并Grid的行\n * @param grid {Ext.Grid.Panel} 需要合并的Grid\n * @param cols {Array} 需要合并的Index（序号）数组；从0开始计数，序号也包含\n * @param isAllSome {Boolean} 是否2个tr的cols必须完全一样才能进行合并。true: 完全一样；false(默认): 不完全一样\n * @return void\n * @author polk6 2015/07/21\n * @example\n * ______________                                  ______________\n * | 年龄 | 姓名 |                                   | 年龄 | 姓名 |\n * --------------       mergeCells(grid, [0])      --------------\n * | 18  | 张三 |               =>                  |     | 张三 |\n * --------------                                  |  18 |-------\n * | 18  | 王五 |                                   |     | 王五 |\n * --------------                                  --------------\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mergeCells</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">,</span> isAllSome<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>3. 框架开发</h2>\n<p>在团队开发或者引入第三方JS的时候，有时候会造成全局对象的命名冲突，比如a.js有个全局函数sendMsg()，b.js也有个全局函数sendMsg()，引入a.js和b.js文件时，会造成sendMsg()函数冲突。</p>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">全局变量冲突：b.js会覆盖a.js的同名函数                                // a.js\n                                                                 ------------------------\n                                                          +----&gt; | function sendMsg() { |\n&lt;script src=&quot;/js/b.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;---+      |     alert(&#39;a&#39;);      |\n&lt;script src=&quot;/js/a.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;---+      | }                    |\n&lt;script type=&quot;text/javascript&quot;&gt;                           |      ------------------------\n                                                          |      // b.js\n    sendMsg(); // =&gt; ‘b’                                  |      -------------------------\n                                                          |      | function sendMsg() {  |\n&lt;/script&gt;                                                 +----&gt; |     alert(&#39;b&#39;);       |\n                                                                 | }                     |\n                                                                 -------------------------</code></pre></div>\n<h3>3.2 单全局变量</h3>\n<p>所创建的全局对象名称是独一无二的，并将所有的功能代码添加到这个全局对象上。调用自己所写的代码时，以这个全局对象为入口。</p>\n<p>如：</p>\n<ul>\n<li>jQuery的全局对象：$和jQuery</li>\n<li>ExtJS的全局对象：Ext</li>\n</ul>\n<p>示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">全局变量冲突：b.js和a.js都有各自的主对象。                             // a.js\n                                                                 -----------------------------\n                                                                 | var A = A || {};          |\n                                                          +----&gt; | A.sendMsg = function () { |\n&lt;script src=&quot;/js/b.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;---+      |     alert(&#39;a&#39;);           |\n&lt;script src=&quot;/js/a.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;---+      | }                         |\n&lt;script type=&quot;text/javascript&quot;&gt;                           |      -----------------------------\n                                                          |      // b.js\n    A.sendMsg(); // =&gt; ‘a’                                |      ------------------------------\n                                                          |      | var B = B || {};           |\n                                                          |      | B.sendMsg = function () {  |\n    B.sendMsg(); // =&gt; &#39;b&#39;                                +----&gt; |     alert(&#39;b&#39;);            |\n                                                                 | }                          |\n                                                                 ------------------------------\n&lt;/script&gt;</code></pre></div>\n<h3>3.3 命名空间</h3>\n<p>在项目规模日益壮大时，可采用命名空间的方式对JS代码进行规范：即将代码按照功能进行分组，以组的形式附加到单全局对象上。</p>\n<p>以Ext的chart模块为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                                                       ------------\n                                                 +---&gt; |   Axis   |\n                                                 |     ------------\n                                                 |     ------------\n                                                 +---&gt; | Category |\n                                    子模块名称     |     ------------\n                                    ----------   |     ------------\n                              +---&gt; |  axis  | --+---&gt; |    ...   |\n                  模块名称     |      ----------         ------------\n                  ---------   |     ----------         ------------\n            +---&gt; | chart | --+---&gt; | series | --+---&gt; |   Area   |\n单全局对象    |     ---------   |     ----------   |     ------------\n---------   |                 |     ----------   |     ------------\n|  Ext  | --+                 +---&gt; |  ...   |   +---&gt; |   Bar    |\n---------   |                       ----------   |     ------------\n            |     ---------                      |     ------------\n            +---&gt; |  ...  |                      +---&gt; |   ...    |\n                  ---------                            ------------</code></pre></div>","frontmatter":{"title":"JavaScript开发规范","date":"June 02, 2017"}}},"pageContext":{"slug":"/2017-06-02-JavaScript开发规范/","previous":{"fields":{"slug":"/2017-05-27-JavaScript创建对象的方式汇总/"},"frontmatter":{"title":"JavaScript创建对象的方式汇总"}},"next":{"fields":{"slug":"/2017-06-13-JavaScript设计模式（一）/"},"frontmatter":{"title":"JavaScript设计模式（一）"}}}}