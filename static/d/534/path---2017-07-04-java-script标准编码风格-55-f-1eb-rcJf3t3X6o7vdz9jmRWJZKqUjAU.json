{"data":{"site":{"siteMetadata":{"title":"进击的前端","author":"ricosmall"}},"markdownRemark":{"id":"14df173c-c927-51ff-869b-1af803e79326","excerpt":"JavaScript 代码规范，自带 linter & 代码自动修正 无须配置。  史上最便捷的统一代码风格的方式，轻松拥有。 自动代码格式化。  只需运行 standard —fix…","html":"<blockquote>\n<p>JavaScript 代码规范，自带 linter &#x26; 代码自动修正</p>\n</blockquote>\n<blockquote>\n<ul>\n<li><strong>无须配置。</strong> 史上最便捷的统一代码风格的方式，轻松拥有。</li>\n<li><strong>自动代码格式化。</strong> 只需运行 standard —fix 从此和脏乱差的代码说再见。</li>\n<li><strong>提前发现风格及程序问题。</strong> 减少代码审查过程中反反复复的修改过程，节约时间。</li>\n</ul>\n</blockquote>\n<!-- more -->\n<p><strong><a href=\"https://standardjs.com/readme-zhcn.html\">JavaScript标准风格（首页）</a></strong></p>\n<p><strong><a href=\"https://standardjs.com/rules-zhcn.html#javascript-standard-style\">JavaScript Standard Style（全文）</a></strong></p>\n<p>下面是ExpressJS项目中遵循该风格的示例代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */</span>\n\n<span class=\"token string\">'use strict'</span>\n\n<span class=\"token comment\">/**\n * Module dependencies.\n * @private\n */</span>\n\n<span class=\"token keyword\">var</span> deprecate <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'depd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * Cache of loaded parsers.\n * @private\n */</span>\n\n<span class=\"token keyword\">var</span> parsers <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */</span>\n\n<span class=\"token comment\">/**\n * Module exports.\n * @type {Parsers}\n */</span>\n\nexports <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> deprecate<span class=\"token punctuation\">.</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'bodyParser: use individual json/urlencoded middlewares'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * JSON parser.\n * @public\n */</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token function\">createParserGetter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * Raw parser.\n * @public\n */</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">'raw'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token function\">createParserGetter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'raw'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * Text parser.\n * @public\n */</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token function\">createParserGetter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * URL-encoded parser.\n * @public\n */</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">'urlencoded'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token function\">createParserGetter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'urlencoded'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bodyParser</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// exclude type option</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token operator\">!==</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        opts<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> _urlencoded <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> _json <span class=\"token operator\">=</span> exports<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bodyParser</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_json</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">_urlencoded</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Create a getter for loading a parser.\n * @private\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createParserGetter</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">loadParser</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Load a parser module.\n * @private\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadParser</span> <span class=\"token punctuation\">(</span>parserName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> parser <span class=\"token operator\">=</span> parsers<span class=\"token punctuation\">[</span>parserName<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parser <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> parser\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// this uses a switch for static require analysis</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>parserName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">:</span>\n      parser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/types/json'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'raw'</span><span class=\"token punctuation\">:</span>\n      parser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/types/raw'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span>\n      parser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/types/text'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'urlencoded'</span><span class=\"token punctuation\">:</span>\n      parser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/types/urlencoded'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// store to prevent invoking require()</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>parsers<span class=\"token punctuation\">[</span>parserName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"JavaScript标准编码风格","date":"July 04, 2017"}}},"pageContext":{"slug":"/2017-07-04-JavaScript标准编码风格/","previous":{"fields":{"slug":"/2017-06-13-JavaScript设计模式（一）/"},"frontmatter":{"title":"JavaScript设计模式（一）"}},"next":{"fields":{"slug":"/2017-07-04-JavaScript模块简史/"},"frontmatter":{"title":"JavaScript模块简史"}}}}