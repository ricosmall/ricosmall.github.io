{"data":{"site":{"siteMetadata":{"title":"进击的前端","author":"ricosmall"}},"markdownRemark":{"id":"bc475956-ddf3-51fb-a8f4-b5303bd64eca","excerpt":"一上来就是前端技术人员的面试，让我感觉压力好大，有点紧张。 问题： Array有哪些方法？ 如何封装简单模块？ CSS如何实现一份设计稿完美兼容各种移动端？ CSS如何做三列布局？ CSS如何实现元素垂直水平居中？ HTTP请求的头部信息包括哪些东西？ HTTP…","html":"<p>一上来就是前端技术人员的面试，让我感觉压力好大，有点紧张。</p>\n<!-- more -->\n<p>问题：</p>\n<ul>\n<li>Array有哪些方法？</li>\n<li>如何封装简单模块？</li>\n<li>CSS如何实现一份设计稿完美兼容各种移动端？</li>\n<li>CSS如何做三列布局？</li>\n<li>CSS如何实现元素垂直水平居中？</li>\n<li>HTTP请求的头部信息包括哪些东西？</li>\n<li>HTTP请求的状态码有哪些，分别代表什么意思？</li>\n<li>Node.js有哪些核心插件或模块？</li>\n<li>拿到一份设计稿，如何开始开发工作？</li>\n<li>有没有写过一些可复用的组件？</li>\n<li>从前端的角度考虑安全性，该如何有效预防？</li>\n</ul>\n<p>面试时确实有一部分原因是紧张，有一部分原因是基础确实不够扎实。</p>\n<p>现在就来慢慢研究这些问题。</p>\n<hr>\n<h3>Array有哪些方法？</h3>\n<table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">concat</code></td>\n<td>连接2个或更多数组，并返回结果</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">every</code></td>\n<td>对数组每一项运行给定函数，如果该函数每一项都返回true，则返回true</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">filter</code></td>\n<td>对数组每一项运行给定函数，返回该函数会返回true的项组成的数组</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">forEach</code></td>\n<td>对数组每一项运行给定函数。这个函数没有返回值</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">join</code></td>\n<td>将所有的数组元素连成一个字符串</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">indexOf</code></td>\n<td>返回第一个与给定参数相等的数组元素的索引，没有找到则放回-1</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">lastIndexOf</code></td>\n<td>返回在数组中搜索到的与给定参数相等的元素的索引里的最大值</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">map</code></td>\n<td>对数组的每一项运行给定函数，返回每次函数的调用结果组成的数组</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">reverse</code></td>\n<td>颠倒数组中元素的顺序，原先第一个元素现在变成最后一个，同样原先的最后一个元素变成了现在的第一个元素</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">slice</code></td>\n<td>传入索引值，将数组里对应索引范围内的元素作为新数组返回</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">some</code></td>\n<td>对数组的每一项运行给定函数，如果任一项返回true，则返回true</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">sort</code></td>\n<td>按照字母顺序对数组排序，支持传入指定排序方法的函数作为参数</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">toString</code></td>\n<td>将数组作为字符串返回</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">valueOf</code></td>\n<td>和toString类似，将数组作为字符串返回</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">push</code></td>\n<td>将传入的参数作为数组的最后一项添加到数组中，并返回新数组的长度</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">pop</code></td>\n<td>取出数组的最后一项并作为返回值</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">shift</code></td>\n<td>取出数组的第一项并作为返回值</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">unshift</code></td>\n<td>将传入的参数作为数组的第一项添加到数组中，并返回新数组的长度</td>\n</tr>\n</tbody>\n</table>\n<p>这是我能想到和找到的所有方法了，如果看官发现更多，请提醒我，谢谢！</p>\n<h3>如何封装简单模块？</h3>\n<p>我采用的是宽放大模式，就是一个立即执行函数表达式：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">...</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>module <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>module <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>CSS如何实现一份设计稿完美兼容各种移动端？</h3>\n<p>采用rem方式，并且采用js动态识别屏幕的宽度动态生成viewport的meta标签。</p>\n<h3>CSS如何做三列布局？</h3>\n<h3>CSS如何实现元素水平垂直居中？</h3>\n<ul>\n<li>方法一：</li>\n</ul>\n<p>HTML部分如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Content here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CSS部分如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> -120px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.content</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 240px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>方法二：</li>\n</ul>\n<h3>HTTP请求的头部信息包括哪些东西？</h3>\n<p>最基本的信息如下表：</p>\n<ul>\n<li>请求头部信息：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>描述</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Host</code></td>\n<td>服务器域名</td>\n<td><code class=\"language-text\">Host: www.baidu.com</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Accept</code></td>\n<td>可接受的媒体类型</td>\n<td><code class=\"language-text\">Accept: * / *</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Accept-Encoding</code></td>\n<td>可接受的编码类型</td>\n<td><code class=\"language-text\">Accept-Encoding: gzip, deflate, sdch</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Accept-Language</code></td>\n<td>可接受的语言</td>\n<td><code class=\"language-text\">Accept-Language: en-US, en; q=0.8</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">User-Agent</code></td>\n<td>用户代理</td>\n<td><code class=\"language-text\">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Content-type</code></td>\n<td>发送内容类型</td>\n<td><code class=\"language-text\">Content-type: text/plain</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Content-length</code></td>\n<td>发送内容长度</td>\n<td><code class=\"language-text\">Content-length: 327</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Connection</code></td>\n<td>客户端连接的类型</td>\n<td><code class=\"language-text\">Connection: keep-alive</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Referer</code></td>\n<td>当前文档的URL</td>\n<td><code class=\"language-text\">Referer: http://www.baidu.com/12345</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>响应头部信息：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>描述</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Access-Control-Allow-Origin</code></td>\n<td>可跨域访问源</td>\n<td><code class=\"language-text\">Access-Control-Allow-Origin: *</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Cache-Control</code></td>\n<td>可缓存性</td>\n<td><code class=\"language-text\">Cache-Control: no-cache</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Content-length</code></td>\n<td>响应内容长度</td>\n<td><code class=\"language-text\">Content-length: 35</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Content-type</code></td>\n<td>响应内容类型</td>\n<td><code class=\"language-text\">Content-type: image/gif</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Date</code></td>\n<td>响应时间</td>\n<td><code class=\"language-text\">Date: Mon, 06 Mar 2017 15:34:16 GMT</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Status</code></td>\n<td>响应状态码</td>\n<td><code class=\"language-text\">Status: 200</code></td>\n</tr>\n</tbody>\n</table>\n<h3>HTTP请求的状态码有哪些？分别代表什么意思？</h3>\n<p>状态码分类：</p>\n<table>\n<thead>\n<tr>\n<th>整体范围</th>\n<th>已定义范围</th>\n<th>分类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100 ～ 199</td>\n<td>100 ～ 101</td>\n<td>信息提示</td>\n</tr>\n<tr>\n<td>200 ～ 299</td>\n<td>200 ～ 206</td>\n<td>成功提示</td>\n</tr>\n<tr>\n<td>300 ～ 399</td>\n<td>300 ～ 307</td>\n<td>重定向</td>\n</tr>\n<tr>\n<td>400 ～ 499</td>\n<td>400 ～ 417</td>\n<td>客户端错误</td>\n</tr>\n<tr>\n<td>500 ～ 599</td>\n<td>500 ～ 505</td>\n<td>服务器错误</td>\n</tr>\n</tbody>\n</table>\n<p>状态码解释：</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">100</code></td>\n<td>Continue（继续） 初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">101</code></td>\n<td>Switching Protocols（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备进行切换。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">200</code></td>\n<td>OK（成功） 一切正常，对GET和POST请求的应答文档跟在后面。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">201</code></td>\n<td>Created（已创建）服务器已经创建了文档，Location头给出了它的URL。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">202</code></td>\n<td>Accepted（已接受）服务器已接受了请求，但尚未对其进行处理。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">203</code></td>\n<td>Non-Authoritative Information（非授权信息）文档已经正常地返回，但一些应答头可能不正确，可能来自另一来源 。（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">204</code></td>\n<td>No Content（无内容）未返回任何内容，浏览器应该继续显示原来的文档。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">205</code></td>\n<td>Reset Content（重置内容）没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">206</code></td>\n<td>Partial Content（部分内容）服务器成功处理了部分 GET 请求。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">300</code></td>\n<td>Multiple Choices（多种选择）客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">301</code></td>\n<td>Moved Permanently（永久移动）请求的网页已被永久移动到新位置。服务器返回此响应（作为对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">302</code></td>\n<td>Found（临时移动）类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”，出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<a href=\"http://host/~user%EF%BC%88%E7%BC%BA%E5%B0%91%E4%BA%86%E5%90%8E%E9%9D%A2%E7%9A%84%E6%96%9C%E6%9D%A0%EF%BC%89%EF%BC%8C%E6%9C%89%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%94%E5%9B%9E301%EF%BC%8C%E6%9C%89%E7%9A%84%E5%88%99%E8%BF%94%E5%9B%9E302%E3%80%82%E4%B8%A5%E6%A0%BC%E5%9C%B0%E8%AF%B4%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E5%81%87%E5%AE%9A%E5%8F%AA%E6%9C%89%E5%BD%93%E5%8E%9F%E6%9D%A5%E7%9A%84%E8%AF%B7%E6%B1%82%E6%98%AFGET%E6%97%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%8D%E4%BC%9A%E8%87%AA%E5%8A%A8%E9%87%8D%E5%AE%9A%E5%90%91%E3%80%82%E8%AF%B7%E5%8F%82%E8%A7%81307%E3%80%82\">http://host/~user（缺少了后面的斜杠），有的服务器返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</a></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">303</code></td>\n<td>See Other（查看其他位置）类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">304</code></td>\n<td>Not Modified（未修改）自从上次请求后，请求的网页未被修改过。原来缓冲的文档还可以继续使用，不会返回网页内容。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">305</code></td>\n<td>Use Proxy（使用代理）只能使用代理访问请求的网页。如果服务器返回此响应，那么，服务器还会指明请求者应当使用的代理。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">307</code></td>\n<td>Temporary Redirect（临时重定向）和 302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只能跟随对GET请求的重定向。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">400</code></td>\n<td>Bad Request（错误请求）请求出现语法错误。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">401</code></td>\n<td>Unauthorized（未授权）客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的Authorization头后再次发出请求。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">403</code></td>\n<td>Forbidden（已禁止） 资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">404</code></td>\n<td>Not Found（未找到）无法找到指定位置的资源。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">405</code></td>\n<td>Method Not Allowed（方法禁用）请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）禁用。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">406</code></td>\n<td>Not Acceptable（不接受）指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">407</code></td>\n<td>Proxy Authentication Required（需要代理授权）类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">408</code></td>\n<td>Request Time-out（请求超时）服务器等候请求时超时。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">409</code></td>\n<td>Conflict（冲突）通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">410</code></td>\n<td>Gone（已删除）如果请求的资源已被永久删除，那么，服务器会返回此响应。该代码与 404（未找到）代码类似，但在资源以前有但现在已经不复存在的情况下，有时会替代 404 代码出现。如果资源已被永久删除，那么，您应当使用 301 代码指定该资源的新位置。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">411</code></td>\n<td>Length Required（需要有效长度）不会接受包含无效内容长度标头字段的请求。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">412</code></td>\n<td>Precondition Failed（未满足前提条件）服务器未满足请求者在请求中设置的其中一个前提条件。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">413</code></td>\n<td>Request Entity Too Large（请求实体过大）请求实体过大，已超出服务器的处理能力。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">414</code></td>\n<td>Request-URI Too Large（请求的 URI 过长）请求的 URI（通常为网址）过长，服务器无法进行处理。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">415</code></td>\n<td>Unsupported Media Type（不支持的媒体类型）请求的格式不受请求页面的支持。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">416</code></td>\n<td>Requested range not satisfiable（请求范围不符合要求）服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">417</code></td>\n<td>Expectation Failed（未满足期望值）服务器未满足”期望”请求标头字段的要求。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">500</code></td>\n<td>Internal Server Error（服务器内部错误）服务器遇到错误，无法完成请求。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">501</code></td>\n<td>Not Implemented（尚未实施） 服务器不具备完成请求的功能。例如，当服务器无法识别请求方法时，服务器可能会返回此代码。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">502</code></td>\n<td>Bad Gateway（错误网关）服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">503</code></td>\n<td>Service Unavailable（服务不可用）服务器由于维护或者负载过重未能应答。通常，这只是一种暂时的状态。</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">504</code></td>\n<td>Gateway Time-out（网关超时） 由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">505</code></td>\n<td>HTTP Version not supported（HTTP 版本不受支持）不支持请求中所使用的 HTTP 协议版本。</td>\n</tr>\n</tbody>\n</table>\n<h3>Node.js有哪些核心插件或模块？</h3>\n<p>Node.js核心模块如下表：</p>\n<table>\n<thead>\n<tr>\n<th>模块名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>http</td>\n<td>提供http服务器功能</td>\n</tr>\n<tr>\n<td>url</td>\n<td>用于解析url</td>\n</tr>\n<tr>\n<td>fs</td>\n<td>文件IO系统</td>\n</tr>\n<tr>\n<td>querystring</td>\n<td>解析url的查询字符串</td>\n</tr>\n<tr>\n<td>util</td>\n<td>提供实用工具</td>\n</tr>\n<tr>\n<td>path</td>\n<td>处理文件路径</td>\n</tr>\n<tr>\n<td>crypto</td>\n<td>提供加密解密功能</td>\n</tr>\n<tr>\n<td>child_process</td>\n<td>新建子进程</td>\n</tr>\n</tbody>\n</table>\n<p>为了提高运行速度，上面这些核心模块在安装时都会被编译成二进制文件。</p>\n<h3>拿到一份设计稿，如何开始开发工作？</h3>\n<p>先分析布局，划分框架，然后规划结构，编写代码。</p>\n<p>如果是协同开发，那就要建立代码规范：</p>\n<ul>\n<li>合理地使用标签</li>\n<li>准确使用CSS</li>\n<li>良好的注释</li>\n<li>清晰的代码结构</li>\n</ul>\n<p>除此之外，为了提高效率，降低出错率，应该实现前端工程化。</p>\n<h3>有没有写过一些可复用的组件？</h3>\n<h3>从前端的角度考虑安全性，该如何有效预防？</h3>","frontmatter":{"title":"JavaScript、CSS、HTTP知识相关的面试题","date":"March 03, 2017"}}},"pageContext":{"slug":"/2017-03-03-JavaScript、CSS、HTTP知识相关的面试题/","previous":{"fields":{"slug":"/2017-03-03-一次关于前端领域知识的面试/"},"frontmatter":{"title":"一次关于前端领域知识的面试"}},"next":{"fields":{"slug":"/2017-03-16-前端开发聚合、分享、期刊订阅类网站/"},"frontmatter":{"title":"前端开发聚合、分享、期刊订阅类网站"}}}}