{"data":{"site":{"siteMetadata":{"title":"进击的前端","author":"ricosmall"}},"markdownRemark":{"id":"9d924ce8-941f-5f87-86e9-2e4086b3401a","excerpt":"一直想写一篇文章，记录一下从搭建博客到实现用 Travis-CI 自动化部署博客的过程。憋到现在才写，拖了很久。 如何使用hexo搭建博客就不赘述了，请打开hexo的 官网 参考文档，很容易的。 第一次小跨越：实现博客同时部署到 Coding 和 Github 由于github…","html":"<p>一直想写一篇文章，记录一下从搭建博客到实现用<a href=\"https://www.travis-ci.org\">Travis-CI</a>自动化部署博客的过程。憋到现在才写，拖了很久。</p>\n<!-- more -->\n<p>如何使用hexo搭建博客就不赘述了，请打开hexo的<a href=\"https://hexo.io\">官网</a>参考文档，很容易的。</p>\n<h2>第一次小跨越：实现博客同时部署到<a href=\"https://coding.net\">Coding</a>和<a href=\"https://github.com\">Github</a></h2>\n<p>由于github在国内访问速度比较慢，比较合适的做法是：把博客静态资源在GitHub上面部署一份，同时在Coding(和GitHub原理一模一样)上也部署一份。如果没有自己的域名，这个时候就可以通过<code class=\"language-text\">yourusername.github.io</code>或者<code class=\"language-text\">yourusername.coding.me</code>访问到相同的博客页面。</p>\n<h3>原始方法</h3>\n<p>一开始，我没有多想，按照原始的方法部署博客。过程就像下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 新建一篇文章</span>\nhexo new post <span class=\"token string\">'文章标题'</span>\n\n<span class=\"token comment\"># 2. 编写文章内容</span>\nvim 文章标题.md\n\n<span class=\"token comment\"># 3. 生成静态博客代码</span>\nhexo generate\n\n<span class=\"token comment\"># 4. 部署博客代码到Github</span>\nhexo deploy\n\n<span class=\"token comment\"># 5. 复制生成的博客代码到另一个Coding项目</span>\n<span class=\"token function\">cp</span> -r public <span class=\"token punctuation\">..</span>/blog-in-coding\n\n<span class=\"token comment\"># 6. 部署博客代码到Coding</span>\n<span class=\"token function\">git</span> add <span class=\"token keyword\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">'create a new post'</span>\n<span class=\"token function\">git</span> push origin master</code></pre></div>\n<p>每次这样显得特别原始，特别麻烦。一个程序员习惯这种机械的流程是没有好下场的。问题总结下来其实就是：是否可以同时将一份博客代码同时部署到两个远程仓库？这个问题我之前专门写了一篇文章做了介绍。<a href=\"/2017/03/03/%E5%B0%86%E4%BB%A3%E7%A0%81%E5%90%8C%E6%97%B6push%E5%88%B0%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/\">传送门</a></p>\n<p>这个问题得以解决，新的博客部署流程就变成了这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 新建一篇文章</span>\nhexo new post <span class=\"token string\">'文章标题'</span>\n\n<span class=\"token comment\"># 2. 编写文章内容</span>\nvim 文章标题.md\n\n<span class=\"token comment\"># 3. 生成静态博客代码</span>\nhexo generate\n\n<span class=\"token comment\"># 4. 部署博客代码到GitHub和Coding</span>\nhexo deploy</code></pre></div>\n<p>已经省去了两个大的步骤。更进一步的做法就是把上面的3和4结合成一个命令：<code class=\"language-text\">hexo deploy --generate</code>。至此，基本上已经优化到一个不错的水平了。</p>\n<h2>第二次大跨越：使用<a href=\"https://www.travis-ci.org\">Travis-CI</a>实现<a href=\"https://hexo.io\">Hexo</a>博客的自动化部署</h2>","frontmatter":{"title":"使用Travis实现hexo博客的自动化部署","date":"August 01, 2017"}}},"pageContext":{"slug":"/2017-08-01-使用Travis实现hexo博客的自动化部署/","previous":{"fields":{"slug":"/2017-07-20-可视化算法/"},"frontmatter":{"title":"可视化算法"}},"next":{"fields":{"slug":"/2017-08-01-CSS多行文本溢出省略显示/"},"frontmatter":{"title":"CSS多行文本溢出省略显示"}}}}